version: '3'
name: test
services:
  mysql:
    image: mysql:8.0.34
    networks:
      - khds_network
    volumes:
      - ./backend/db/conf.d:/etc/mysql/conf.d
      - ./backend/db/data:/var/lib/mysql
      - ./backend/db/initdb.d:/docker-entrypoint-initdb.d
    env_file: ./backend/.env
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
    ports:
      - "3307:3306"
    restart: always
    healthcheck:  # ✅ MySQL이 완전히 실행될 때까지 대기
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    networks:
      - khds_network
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy # mysql이 준비된 후 실행
    env_file:
      - ./backend/.env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/uplog?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    restart: always
  frontend:
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - khds_network
  nginx:
    image: nginx:latest
    networks:
      - khds_network
    restart: always
    volumes:
      - ./conf/:/etc/nginx/conf.d
    ports:
      - 80:80
    depends_on:
      - backend
      - frontend
networks:
  khds_network:
    driver: bridge
