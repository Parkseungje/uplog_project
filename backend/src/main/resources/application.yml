logging:
  level:
    org.springframework.security: trace

spring:
  application:
    name: backend

  datasource:
    #use local to docker mysql
    url: jdbc:mysql://127.0.0.1:3307/uplog?useSSL=false&allowPublicKeyRetrieval=true
    # docker to docker
    # url: jdbc:mysql://mysql:3306/uplog?useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: rootpassword
    driver-class-name: com.mysql.cj.jdbc.Driver
  #JPA
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
  # SMTP
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GOOGLE_USERNAME}
    password: ${GOOGLE_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  # Spring Security
  security:
    user:
      name: user1
      password: password
    oauth2:
      authorizationserver:
        client:
          oidc-client:
            registration:
              client-id: "oidc-client"
              client-secret: "{noop}secret"
              client-authentication-methods:
                - "client_secret_basic"
              authorization-grant-types:
                - "authorization_code"
                - "refresh_token"
              redirect-uris:
                - "http://127.0.0.1:8080/login/oauth2/code/oidc-client"
              post-logout-redirect-uris:
                - "http://127.0.0.1:8080/"
              scopes:
                - "openid"
                - "profile"
            require-authorization-consent: true

#localhost:3000
base-url: ${BASE_URL}

jwt-secret-key: ${SECRET_KEY}

#google ouath info
google:
  oauth:
    client-id: ${CLIENT_ID}
    client-secret: ${CLIENT_SECRET}
    redirect-path: ${REDIRECT_PATH}
    authorization-code: ${AUTHORIZATION_CODE}
    access-token-url: ${ACCESS_TOKEN_URL}
    profile-url: ${PROFILE_URL}
